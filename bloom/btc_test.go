package bloom_test

import (
	"bytes"
	"testing"

	"github.com/sammy00/bip37/wire"

	btcwire "github.com/btcsuite/btcd/wire"
	"github.com/sammy00/bip37/bloom"
)

func TestFilter_AddOutPoint(t *testing.T) {
	// these test cases are generated by running the reference impl
	// from btcsuite/btcutil
	testCases := []struct {
		outPoint *btcwire.OutPoint
		expect   []byte
	}{
		{
			outPoint: bloom.NewOutPoint(
				bloom.Unhexlify("2440cddbc2a189357e7bc0e4f552bfde79e7f6b16d41c32436a67fd6db8f5051"),
				1365930811,
			),
			expect: bloom.Unhexlify("0180020010100010028023010110020000000040000000001000000004000000000008"),
		},
		{
			outPoint: bloom.NewOutPoint(
				bloom.Unhexlify("4eae34665dd045f0a5d7c1bfbb3dc7f7dc7e83af6473adb86e5ec294884d16da"),
				2369852057,
			),
			expect: bloom.Unhexlify("c00000800800000100820030004200000a000001400012000000000001000000200000"),
		},
		{
			outPoint: bloom.NewOutPoint(
				bloom.Unhexlify("05b1b97ed8376ab33c00bf65edcb6a68951dceeec503a046ce9a0b2e8479ce90"),
				203140287,
			),
			expect: bloom.Unhexlify("000000040000080a040000080280000000000080241010000000020040000080000061"),
		},
		{
			outPoint: bloom.NewOutPoint(
				bloom.Unhexlify("4e8968607d8eccdaa973aab3289e5bc50acc24f0d924644ff5ab8e331e222209"),
				439152913,
			),
			expect: bloom.Unhexlify("1800000200090000480100008000002000090800000000080000400000002000008800"),
		},
		{
			outPoint: bloom.NewOutPoint(
				bloom.Unhexlify("b2d65d20a076eb5ed9fe107c432a4b18da0d0ff5ffbd844a0aedb3240c8f5015"),
				2452721939,
			),
			expect: bloom.Unhexlify("0000100029008000000800000000001200000000100000000006880800408080810000"),
		},
		{
			outPoint: bloom.NewOutPoint(
				bloom.Unhexlify("d2dd5b79a674ab3c59a5455c86e870ef269af79332664999f6c5cd8b62e01902"),
				661960754,
			),
			expect: bloom.Unhexlify("0c80000040000800500000000004010000050300040280002000000000000000400000"),
		},
		{
			outPoint: bloom.NewOutPoint(
				bloom.Unhexlify("82155b639c3870f12059a87427e97137a3225e6c98e06714da0ffbedc7ad084d"),
				1834508511,
			),
			expect: bloom.Unhexlify("0200222000000001100020600880000000000000001000100000040800800102010000"),
		},
		{
			outPoint: bloom.NewOutPoint(
				bloom.Unhexlify("b6981b9f5477f82f5bbb65a48c7aee6a05f4ed20e41f091f2781ac150e4ee8e3"),
				1658529405,
			),
			expect: bloom.Unhexlify("0080000200240000000000000000009000000884400400002080040000000000000201"),
		},
	}

	const (
		N          = 10
		Tweak      = bloom.Tweak
		P          = 0.000001
		UpdateRule = wire.UpdateAll
	)

	for i, c := range testCases {
		filter := bloom.New(N, P, UpdateRule, Tweak)
		filter.AddOutPoint(c.outPoint)

		if got := filter.Snapshot().Bits; !bytes.Equal(got, c.expect) {
			t.Fatalf("#%d invalid filter: got %x, expect %x", i, got, c.expect)
		}
	}
}
